{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0ede8b95",
   "metadata": {},
   "source": [
    "Series Part II"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d7adafc0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from pydataset import data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b630d791",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "my_df = data('sleepstudy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ecc7191e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c23452d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "s2= my_df.Reaction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "20d9cd5b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    249.5600\n",
       "2    258.7047\n",
       "3    250.8006\n",
       "4    321.4398\n",
       "5    356.8519\n",
       "Name: Reaction, dtype: float64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93aaebce",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "963b4cfc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "249.56"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s2[1]\n",
    "my_df['Reaction'][1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "84409999",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "249.56"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_df.Reaction[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "82ba6fd1",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'q3' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/lp/pxhhvyv90vx8hwbv8yjldhj80000gn/T/ipykernel_2330/1100591708.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0ms2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m'q4'\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mn\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0mq3\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m'q1-q3'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/anaconda3/lib/python3.9/site-packages/pandas/core/series.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, func, convert_dtype, args, **kwargs)\u001b[0m\n\u001b[1;32m   4431\u001b[0m         \u001b[0mdtype\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mfloat64\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4432\u001b[0m         \"\"\"\n\u001b[0;32m-> 4433\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mSeriesApply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconvert_dtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4434\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4435\u001b[0m     def _reduce(\n",
      "\u001b[0;32m/usr/local/anaconda3/lib/python3.9/site-packages/pandas/core/apply.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1086\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_str\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1087\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1088\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_standard\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1089\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1090\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0magg\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/anaconda3/lib/python3.9/site-packages/pandas/core/apply.py\u001b[0m in \u001b[0;36mapply_standard\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1141\u001b[0m                 \u001b[0;31m# List[Union[Callable[..., Any], str]]]]]\"; expected\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1142\u001b[0m                 \u001b[0;31m# \"Callable[[Any], Any]\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1143\u001b[0;31m                 mapped = lib.map_infer(\n\u001b[0m\u001b[1;32m   1144\u001b[0m                     \u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1145\u001b[0m                     \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m  \u001b[0;31m# type: ignore[arg-type]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/anaconda3/lib/python3.9/site-packages/pandas/_libs/lib.pyx\u001b[0m in \u001b[0;36mpandas._libs.lib.map_infer\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32m/var/folders/lp/pxhhvyv90vx8hwbv8yjldhj80000gn/T/ipykernel_2330/1100591708.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(n)\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0ms2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m'q4'\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mn\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0mq3\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m'q1-q3'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'q3' is not defined"
     ]
    }
   ],
   "source": [
    "s2.apply(lambda n: 'q4' if n > q3 else 'q1-q3')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b37a7a56",
   "metadata": {},
   "outputs": [],
   "source": [
    "ds_team_series = pd.Series (['Adam', 'Adam', 'Andrew', 'Carina', 'John', 'John', \n",
    "                            'Madeleine', 'Misty', 'Margaret', 'Ryan', 'Tasha'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0a5a49c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      True\n",
       "1      True\n",
       "2      True\n",
       "3     False\n",
       "4     False\n",
       "5     False\n",
       "6     False\n",
       "7     False\n",
       "8     False\n",
       "9     False\n",
       "10    False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds_team_series.str.startswith('A')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "da5b2158",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      Adam\n",
       "1      Adam\n",
       "2    Andrew\n",
       "dtype: object"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds_team_series[ds_team_series.str.startswith('A')]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8901564d",
   "metadata": {},
   "source": [
    "# numerical to categorical values - binning and cutting"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acc86fac",
   "metadata": {},
   "source": [
    "cut() put numerical values into discrete bins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ab59d5f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "s2_minutes = s2/60"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0130ec2c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1      4.159333\n",
       "2      4.311745\n",
       "3      4.180010\n",
       "4      5.357330\n",
       "5      5.947532\n",
       "         ...   \n",
       "176    5.493460\n",
       "177    5.574697\n",
       "178    5.720332\n",
       "179    6.152362\n",
       "180    6.068727\n",
       "Name: Reaction, Length: 180, dtype: float64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s2_minutes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "82a52340",
   "metadata": {},
   "outputs": [],
   "source": [
    "s2_bins = pd.cut(s2_minutes, 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "893b189c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1      (3.234, 4.372]\n",
       "2      (3.234, 4.372]\n",
       "3      (3.234, 4.372]\n",
       "4      (4.372, 5.506]\n",
       "5      (5.506, 6.639]\n",
       "            ...      \n",
       "176    (4.372, 5.506]\n",
       "177    (5.506, 6.639]\n",
       "178    (5.506, 6.639]\n",
       "179    (5.506, 6.639]\n",
       "180    (5.506, 6.639]\n",
       "Name: Reaction, Length: 180, dtype: category\n",
       "Categories (4, interval[float64, right]): [(3.234, 4.372] < (4.372, 5.506] < (5.506, 6.639] < (6.639, 7.773]]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s2_bins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a23a344b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4.372, 5.506]    75\n",
       "(3.234, 4.372]    53\n",
       "(5.506, 6.639]    44\n",
       "(6.639, 7.773]     8\n",
       "Name: Reaction, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s2_bins.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "d151e0ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1      (4.146, 5.052]\n",
       "2      (4.146, 5.052]\n",
       "3      (4.146, 5.052]\n",
       "4      (5.052, 5.959]\n",
       "5      (5.052, 5.959]\n",
       "            ...      \n",
       "176    (5.052, 5.959]\n",
       "177    (5.052, 5.959]\n",
       "178    (5.052, 5.959]\n",
       "179    (5.959, 6.866]\n",
       "180    (5.959, 6.866]\n",
       "Name: Reaction, Length: 180, dtype: category\n",
       "Categories (5, interval[float64, right]): [(3.234, 4.146] < (4.146, 5.052] < (5.052, 5.959] < (5.959, 6.866] < (6.866, 7.773]]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s2_bins_5 = pd.cut(s2_minutes, 5)\n",
    "s2_bins_5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "edbdad6b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1      (4, 5]\n",
       "2      (4, 5]\n",
       "3      (4, 5]\n",
       "4      (5, 6]\n",
       "5      (5, 6]\n",
       "        ...  \n",
       "176    (5, 6]\n",
       "177    (5, 6]\n",
       "178    (5, 6]\n",
       "179    (6, 7]\n",
       "180    (6, 7]\n",
       "Name: Reaction, Length: 180, dtype: category\n",
       "Categories (5, interval[int64, right]): [(3, 4] < (4, 5] < (5, 6] < (6, 7] < (7, 8]]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s2_bins2 = pd.cut(s2_minutes, [3,4,5,6,7,8])\n",
    "s2_bins2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "35bc3d17",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 5]    74\n",
       "(5, 6]    51\n",
       "(3, 4]    28\n",
       "(6, 7]    22\n",
       "(7, 8]     5\n",
       "Name: Reaction, dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s2_bins2.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "5c593634",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "63d3eacb",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(s2_minutes)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "a22ea7c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "s2_bins = pd.cut(s2_minutes, 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "63dc60ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "s2_bins_value_counts = s2_bins.value_counts(sort = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "842e19b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1      (4.146, 4.599]\n",
       "2      (4.146, 4.599]\n",
       "3      (4.146, 4.599]\n",
       "4      (5.052, 5.506]\n",
       "5      (5.506, 5.959]\n",
       "            ...      \n",
       "176    (5.052, 5.506]\n",
       "177    (5.506, 5.959]\n",
       "178    (5.506, 5.959]\n",
       "179    (5.959, 6.412]\n",
       "180    (5.959, 6.412]\n",
       "Name: Reaction, Length: 180, dtype: category\n",
       "Categories (10, interval[float64, right]): [(3.234, 3.692] < (3.692, 4.146] < (4.146, 4.599] < (4.599, 5.052] ... (5.959, 6.412] < (6.412, 6.866] < (6.866, 7.319] < (7.319, 7.773]]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s2_bins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "bc9b7b6a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3.234, 3.692]    10\n",
       "(3.692, 4.146]    25\n",
       "(4.146, 4.599]    34\n",
       "(4.599, 5.052]    36\n",
       "(5.052, 5.506]    23\n",
       "(5.506, 5.959]    25\n",
       "(5.959, 6.412]    15\n",
       "(6.412, 6.866]     5\n",
       "(6.866, 7.319]     3\n",
       "(7.319, 7.773]     4\n",
       "Name: Reaction, dtype: int64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s2_bins_value_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "944e0a4e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# count the occurrences of each unique value and get the top 6\n",
    "top_letters = letters.value_counts().head(6)\n",
    "\n",
    "# create a bar plot of the top 6 letters\n",
    "top_letters.plot.bar()\n",
    "\n",
    "# add labels and title\n",
    "plt.xlabel(\"Letter\")\n",
    "plt.ylabel(\"Frequency\")\n",
    "plt.title(\"Most Commonly Occurring Letters\")\n",
    "\n",
    "# show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a4b709a7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
